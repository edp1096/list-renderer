{
  "version": 3,
  "sources": ["../ts/list-renderer.ts"],
  "sourcesContent": ["class ListRenderer {\r\n    root: HTMLElement\r\n    template: string\r\n    dataForDisplay: string[]\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.root = root\r\n        this.template = \"\"\r\n        this.dataForDisplay = new Array()\r\n    }\r\n\r\n    evaluateString(cmd: string): any { return new Function(\"'use strict'; return (\" + cmd + \")\")() }\r\n\r\n    prepareEvents(els: HTMLCollection): string[] {\r\n        let result: string[] = new Array()\r\n\r\n        for (const el of els) {\r\n            let lrCLKs: string[] = new Array()\r\n            if (el.children.length > 0) {\r\n                lrCLKs = this.prepareEvents(el.children)\r\n                if (lrCLKs.length > 0) { result = result.concat(lrCLKs) }\r\n            }\r\n\r\n            const clickCMD: string = el.getAttribute(\"lr-click\")\r\n            if (clickCMD != undefined && clickCMD != null) {\r\n                result = result.concat(clickCMD)\r\n\r\n                // Because js do shallow copy so, not need to return changed attributes of elements\r\n                // structuredClone cannot be used because HTMLCollection object could not be cloned\r\n                el.setAttribute(\"onclick\", clickCMD)\r\n                el.removeAttribute(\"lr-click\")\r\n            }\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    findAndSetList() {\r\n        this.dataForDisplay = new Array()\r\n\r\n        const conds: string[] = new Array()\r\n        const variableMatchesList: string[][] = new Array()\r\n        const c: HTMLCollection = this.root.children\r\n        const regexForVariables: RegExp = /{{(.*?)}}/g\r\n\r\n        for (const i in c) {\r\n            if ((c[i].nodeType != undefined) && (c[i].tagName.toLowerCase() != \"script\")) {\r\n                const listName: string = c[i].getAttribute(\"lr-loop\")\r\n                const listDatas: string[] = this.evaluateString(listName)\r\n\r\n                if (listName != undefined) {\r\n                    this.template = c[i].outerHTML.trim()\r\n                    const lrCLKs: string[] = this.prepareEvents(c[i].children)\r\n\r\n                    for (const j in c[i].children) {\r\n                        const tpl: Element = c[i].children[j]\r\n                        if (tpl.outerHTML != undefined) {\r\n                            conds.push(tpl.getAttribute(\"lr-if\"))\r\n\r\n                            tpl.removeAttribute(\"lr-if\")\r\n                            this.dataForDisplay.push(tpl.outerHTML.trim())\r\n                            variableMatchesList.push(this.dataForDisplay[this.dataForDisplay.length - 1].match(regexForVariables))\r\n                        }\r\n                    }\r\n\r\n                    c[i].innerHTML = \"\"\r\n\r\n                    for (const idx in listDatas) {\r\n                        const listData: string = listDatas[idx]\r\n\r\n                        const lrCLKsChange: string[] = new Array()\r\n                        for (const j in lrCLKs) {\r\n                            const lrCLK = lrCLKs[j]\r\n                            const lrCLKChange = lrCLK.replace(\"$index\", idx)\r\n                            lrCLKsChange.push(lrCLKChange)\r\n                        }\r\n\r\n                        for (const k in this.dataForDisplay) {\r\n                            let isInsert: boolean = true\r\n                            let dataChanged: string = this.dataForDisplay[k]\r\n\r\n                            for (const l in lrCLKsChange) {\r\n                                const lrCLKChange = lrCLKsChange[l]\r\n                                dataChanged = dataChanged.replace(lrCLKs[l], lrCLKChange)\r\n                            }\r\n\r\n                            const variableMatches: string[] = variableMatchesList[k]\r\n\r\n                            for (const l in variableMatches) {\r\n                                const variableMatch: string = variableMatches[l]\r\n                                const tplVarName: string = variableMatch.replace(regexForVariables, \"$1\")\r\n\r\n                                if ((conds[k] != null) && (conds[k].indexOf(tplVarName) != -1)) {\r\n                                    const condition = conds[k].replace(tplVarName, \"'\" + listData[tplVarName] + \"'\")\r\n                                    isInsert = this.evaluateString(condition)\r\n                                }\r\n\r\n                                if (!isInsert) {\r\n                                    dataChanged = \"\"\r\n                                    break\r\n                                }\r\n\r\n                                let tplVarValue = listData[tplVarName]\r\n                                if (tplVarValue == undefined) { tplVarValue = \"\" }\r\n                                dataChanged = dataChanged.replace(variableMatch, tplVarValue)\r\n                                if (tplVarValue != undefined) { dataChanged = dataChanged.replace(variableMatch, tplVarValue) }\r\n                            }\r\n\r\n                            c[i].innerHTML += dataChanged\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() { this.findAndSetList() }\r\n\r\n    restoreToTemplate() { this.root.innerHTML = this.template }\r\n\r\n    reload() {\r\n        this.restoreToTemplate()\r\n        this.render()\r\n    }\r\n}\r\n\r\nexport default ListRenderer"],
  "mappings": "4ZAAA,6DAAmB,CAKf,YAAY,EAAmB,CAC3B,KAAK,KAAO,EACZ,KAAK,SAAW,GAChB,KAAK,eAAiB,GAAI,MAC9B,CAEA,eAAe,EAAkB,CAAE,MAAO,IAAI,UAAS,yBAA2B,EAAM,GAAG,EAAE,CAAE,CAE/F,cAAc,EAA+B,CACzC,GAAI,GAAmB,GAAI,OAE3B,OAAW,KAAM,GAAK,CAClB,GAAI,GAAmB,GAAI,OAC3B,AAAI,EAAG,SAAS,OAAS,GACrB,GAAS,KAAK,cAAc,EAAG,QAAQ,EACnC,EAAO,OAAS,GAAK,GAAS,EAAO,OAAO,CAAM,IAG1D,GAAM,GAAmB,EAAG,aAAa,UAAU,EACnD,AAAI,GAAY,MAAa,GAAY,MACrC,GAAS,EAAO,OAAO,CAAQ,EAI/B,EAAG,aAAa,UAAW,CAAQ,EACnC,EAAG,gBAAgB,UAAU,EAErC,CAEA,MAAO,EACX,CAEA,gBAAiB,CACb,KAAK,eAAiB,GAAI,OAE1B,GAAM,GAAkB,GAAI,OACtB,EAAkC,GAAI,OACtC,EAAoB,KAAK,KAAK,SAC9B,EAA4B,aAElC,OAAW,KAAK,GACZ,GAAK,EAAE,GAAG,UAAY,MAAe,EAAE,GAAG,QAAQ,YAAY,GAAK,SAAW,CAC1E,GAAM,GAAmB,EAAE,GAAG,aAAa,SAAS,EAC9C,EAAsB,KAAK,eAAe,CAAQ,EAExD,GAAI,GAAY,KAAW,CACvB,KAAK,SAAW,EAAE,GAAG,UAAU,KAAK,EACpC,GAAM,GAAmB,KAAK,cAAc,EAAE,GAAG,QAAQ,EAEzD,OAAW,KAAK,GAAE,GAAG,SAAU,CAC3B,GAAM,GAAe,EAAE,GAAG,SAAS,GACnC,AAAI,EAAI,WAAa,MACjB,GAAM,KAAK,EAAI,aAAa,OAAO,CAAC,EAEpC,EAAI,gBAAgB,OAAO,EAC3B,KAAK,eAAe,KAAK,EAAI,UAAU,KAAK,CAAC,EAC7C,EAAoB,KAAK,KAAK,eAAe,KAAK,eAAe,OAAS,GAAG,MAAM,CAAiB,CAAC,EAE7G,CAEA,EAAE,GAAG,UAAY,GAEjB,OAAW,KAAO,GAAW,CACzB,GAAM,GAAmB,EAAU,GAE7B,EAAyB,GAAI,OACnC,OAAW,KAAK,GAAQ,CAEpB,GAAM,GAAc,AADN,EAAO,GACK,QAAQ,SAAU,CAAG,EAC/C,EAAa,KAAK,CAAW,CACjC,CAEA,OAAW,KAAK,MAAK,eAAgB,CACjC,GAAI,GAAoB,GACpB,EAAsB,KAAK,eAAe,GAE9C,OAAW,KAAK,GAAc,CAC1B,GAAM,GAAc,EAAa,GACjC,EAAc,EAAY,QAAQ,EAAO,GAAI,CAAW,CAC5D,CAEA,GAAM,GAA4B,EAAoB,GAEtD,OAAW,KAAK,GAAiB,CAC7B,GAAM,GAAwB,EAAgB,GACxC,EAAqB,EAAc,QAAQ,EAAmB,IAAI,EAExE,GAAK,EAAM,IAAM,MAAU,EAAM,GAAG,QAAQ,CAAU,GAAK,GAAK,CAC5D,GAAM,GAAY,EAAM,GAAG,QAAQ,EAAY,IAAM,EAAS,GAAc,GAAG,EAC/E,EAAW,KAAK,eAAe,CAAS,CAC5C,CAEA,GAAI,CAAC,EAAU,CACX,EAAc,GACd,KACJ,CAEA,GAAI,GAAc,EAAS,GAC3B,AAAI,GAAe,MAAa,GAAc,IAC9C,EAAc,EAAY,QAAQ,EAAe,CAAW,EACxD,GAAe,MAAa,GAAc,EAAY,QAAQ,EAAe,CAAW,EAChG,CAEA,EAAE,GAAG,WAAa,CACtB,CAEJ,CACJ,CACJ,CAER,CAEA,QAAS,CAAE,KAAK,eAAe,CAAE,CAEjC,mBAAoB,CAAE,KAAK,KAAK,UAAY,KAAK,QAAS,CAE1D,QAAS,CACL,KAAK,kBAAkB,EACvB,KAAK,OAAO,CAChB,CACJ,EAEO,EAAQ",
  "names": []
}
